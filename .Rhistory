newMatrix <-makeCacheMatrix(2:5,2,2)
newMatrix <-makeCacheMatrix(2:5)
newMatrix$get()
newMatrix$getmatrix()
testMatrix <-makeCacheMatrix((matrix(2:5),2,2))
testMatrix <-makeCacheMatrix((matrix(2:5,2,2))
end
newMatrix <- makeCacheMatrix(matrix(2:5,2,2))
newMatrix$get()
cacheSolve(newMatrix)
cacheSolve(newMatrix)
newMatrix$set(c(1,2,3,4),2,2)
newMatrix$set(matrix(c(1,2,3,4),2,2))
cacheSolve(newMatrix)
cacheSolve(newMatrix)
testMatrix <- makeCacheMatrix(matrix(1:6,3,3))
testMatrix$get()
cacheSolve(testMatrix)
source('D:/DataScienceWorkspace/cachematrix.R')
testMatrix <- makeCacheMatrix(matrix(1:6,3,3))
testMatrix$get()
cacheSolve(testMatrix)
testMatrix <- makeCacheMatrix(matrix(1:9,3,3))
testMatrix$get()
cacheSolve(testMatrix)
det(testMatrix)
det(testMatrix$get())
testMatrix <- makeCacheMatrix(matrix(c(1,2,2,4,3,4,1,1,4),3,3))
det(testMatrix$get())
cacheSolve(testMatrix)
cacheSolve(testMatrix)
testMatrix <- makeCacheMatrix(matrix(1:4,2,2)
adfdasf
testMatrix <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(testMatrix)
cacheSolve(testMatrix)
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
testMatrix$set(matrix(1:4,2,2))
cacheSolve(testMatrix)
cacheSolve(testMatrix)
source('D:/DataScienceWorkspace/cachematrix.R')
inv <<- NULL
source('D:/DataScienceWorkspace/cachematrix.R')
testMatrix$set(matrix(1:4,2,2))
cacheSolve(testMatrix)
cacheSolve(testMatrix)
testMatrix$set(matrix(2:6,2,2))
testMatrix$set(matrix(2:5,2,2))
cacheSolve(testMatrix)
cacheSolve(testMatrix)
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
exit
logout
quit
quit()
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
source('D:/DataScienceWorkspace/cachematrix.R')
Quit()
quit()
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
plot (x, y)
library(swirl)
start
next
library(swirl)
swirl()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
exit
bye()
exit
quit()
library(swirl)
swirl()
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7 )
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n=100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
play()
dim(cars)
str(Cars)
str(cars)
tail(cars,10)
nxt()
plot(cars)
?plot
plot(x= cars$speed, y = cars$dist)
plot(x=cars$dist,y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance)
asdfa
asdfasdfads end
quit()
)
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main= "My Plot")
plot(cars, title= "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
play()
?par
?points
nxt()
plot(cars, pch = 2)
mtcars
data(mtcars)
play()
dim(mtcars)
head(mtcars)
str(mtcars)
nxt()
?boxplot
boxplot(data=mtcars, formula = mpg ~ cyl)
boxplot(x=mtcars, formula = mpg ~ cyl)
boxplot(fomula = mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
bye()
quit()
packageVersion("swril")
library("swirl")
packageVersion("swril")
bye()
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
bye()
swirl()
bye()
swirl()
bye()
swirl()
bye()
quit()
quit()
install.packages("Rmysql")
install.packages("RMySQL")
install.packages("sqldf")
library(sqldf)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv" , destfile = "acs.csv")
acs <-read.csv("acs.csv", header = TRUE)
str(acs)
getwd()
sqldf("select pwgtp1 from acs where AGEP < 50")
str(acs)
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
library(XML)
doc.html <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html")
doc.html
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
doc.text = unlist(xPathApply(doc.html, '//p', xmlValue))
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
doc.html <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html", useInternalNodes = TRUE)
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
doc.text = gsub('\\n', ' ', doc.text)
doc.text
htmlCode <- readLines("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode[10]
htmlCode[10]
htmlCode[20]
nchar(htmlCode[10])
output<-c(nchar(htmlCode[10]), nchar(htmlCode[20],nchar(htmlCode[30], nchar(htmlCode[100]))
output<-c(nchar(htmlCode[10]), nchar(htmlCode[20]),nchar(htmlCode[30]), nchar(htmlCode[100]))
library(readr)
x <- read_fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 4, fwf_widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4))))
x <- read_fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 4, fwf_widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
x
sum(x$X4)
q()
library("swirl")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
play()
names(cran)
str(cran)
nxt()
?group_by
by_package <- cran %>% group_by(package)
by_package <- group_by(cran, package)
by_package
summarise(mean(size))
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count>679)
top_counts <-filter(pack_sum, count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_Sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs= 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, id_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_verion== "3.1.1", counry =="US")
filter(cran, r_version== "3.1.1", counry =="US")
filter(cran, r_version== "3.1.1", country =="US")
?Comparison
filter(cran, r_version < "3.0.2", country =="IN")
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran,country == "US" | country = "IN")
filter(cran,country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb /2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(tidyr)
bye()
q()
library("swirl")
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into= c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
reset()
swirl()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
bye()
q()
library(swirl)
swirl()
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("192012--")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 12, minutes = 56)
this_moment
nyc <- now(time zone = "America/New_York")
?now
nyc <- now(tzone = "America/New_York")
nyc
play()
now(tzone = "Chennai")
now(tzone = "India")
nxt()
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz= "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive, tzone = attr(start, "tzone") )
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
bye()
q()
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "acd.csv")
acd <- read.csv("acd.csv", header = TRUE)
head(acd)
str(acd)
names(acd)
vn <- names(acd)
strsplit(vn, "wgtp")
temp <-strsplit(vn, "wgtp")
temp[[123]]
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "gdp.csv")
gdp <- read.csv(file = "gdp.csv", header = TRUE)
head(gdp)
str(gdp)
g1 <- read.csv(file = "gdp.csv", skip = 4, nrows = 215, stringsAsFactors = FALSE)
head(g1)
g1
g1
g1 <- g1[X!=""]
g1 <- g1[ X!=""]
head(g1)
g1 <- g1[, list(X,"X.1", "X.3", "X.4")]
g1 <- g1[, list("X","X.1", "X.3", "X.4")]
g1 <- g1[, list(X,X.1,X.3,X.4)]
g1dt <- table(g1)
g1dt <- g1dt[, list(X, X.1, X.3, X.4)]
g1dt <- g1dt[, list("X", "X.1", "X.3", "X.4")]
g1 <- as.numeric(gsub(",", "", gdp$X.4 ))
g1
head(g1)
mean(g1, na.rm = TRUE)
g1
g1dt
remove(g1)
remove(g1dt)
remove(temp)
dtGDP <- data.table(read.csv("gdp.csv", skip = 4, nrows = 215, stringsAsFactors = FALSE))
library(data.table)
dtGDP <- data.table(read.csv("gdp.csv", skip = 4, nrows = 215, stringsAsFactors = FALSE))
dtGDP
dtGDP <- dtGDP[X != ""]
dtGDP
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
dtGDP
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
dtGDP
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
gdp
mean(gdp, na.rm = TRUE)
grep("^United", gtGDP$long.name)
grep("^United", dtGDP$long.name)
grepl("^United", dtGDP$long.name)
isU <- grepl("^United", dtGDP$long.name)
summary(isU)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "FGDP.csv")
download.file(url= "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "FCS.csv")
dtFGDP <- data.table(read.csv("FGDP.CSV", header = TRUE))
rm(dtFGDP)
dtED <- data.table(read.csv("FCS.csv"))
head(dtED)
names(dtED)
newdt <- merge(dtGDP, dtED, all = TRUE, by= c("CountryCode"))
newdt
names(newdt)
head(newdt)
names(newdt)
newdt$Special.Notes
isF <- grepl("fiscal year end", tolower(newdt$Special.Notes))
isJ <- grepl("june", tolower(newdt$Special.Notes))
table(isF, isJ)
newdt[isF & isJ, Special.Notes]
count(newdt[isF & isJ, Special.Notes])
library(quantmod)
install.packages(quantmod)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
head(amzn)
sampleTimes = index(amzn)
sampleTimes
year(sampleTimes)
table(year(sampleTimes))
table(weekdays(sampleTimes))
table(year(sampleTimes), weekdays(sampleTimes))
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
q()
setwd("D:\DataScienceWorkspace")
setwd("D:\\DataScienceWorkspace")
setwd (".\Getting_n_Cleaning_Data_week4_Assignment")
setwd (".\Getting_n_Cleaning_Data_week4_Assignment")
setwd (".\ Getting_n_Cleaning_Data_week4_Assignment")
setwd("D:\\DatascienceWorkspace\\Getting_n_Cleaning_Data_week4_Assignment\\")
